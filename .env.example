# Tesseract OCR Configuration
# Path to tesseract binary (default: tesseract)
# macOS: brew install tesseract
# Linux: apt-get install tesseract-ocr
TESSERACT_CMD=tesseract

# Enable optional AI formatting cleanup of OCR output
# Options: true, false (default)
# Note: Adds ~$0.01 per 100 pages if enabled
USE_AI_FORMATTING=false

# OpenAI API Configuration
# Get your API key from: https://platform.openai.com/api-keys
OPENAI_API_KEY=sk-your-key-here

# Embedding Model Configuration
# Model used for generating vector embeddings
# Options: text-embedding-3-small (default), text-embedding-3-large
EMBEDDING_MODEL=text-embedding-3-small

# Embedding dimensions
# Must match the selected embedding model
# text-embedding-3-small: 1536 dimensions (default)
# text-embedding-3-large: 3072 dimensions
EMBEDDING_DIMENSIONS=1536

# Database Configuration
# Local database for ingestion (full pipeline)
# Format: postgresql+asyncpg://user:password@localhost:5432/database_name
DATABASE_URL=postgresql+asyncpg://postgres@localhost/mpp_minerva_local

# Production database (API queries only)
# Used for production deployment
PRODUCTION_DATABASE_URL=postgresql+asyncpg://user:password@host:5432/mpp_minerva_prod

# Storage Configuration
# Local directory for storing book page screenshots
# This directory should be excluded from git (.gitignore)
SCREENSHOTS_DIR=screenshots/

# Session state file path
# Stores browser session data for Kindle authentication
# Default: ~/.minerva/session_state.json
SESSION_STATE_PATH=~/.minerva/session_state.json

# Logging Configuration
# Log level for application logging
# Options: DEBUG, INFO (default), WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# CORS Configuration
# Comma-separated list of allowed origins for API requests
# For development: http://localhost:3000
# For production: https://mypeptidepal.ai
CORS_ALLOWED_ORIGINS=http://localhost:3000,https://mypeptidepal.ai

# API Security Configuration
# API key for authenticating requests to protected endpoints
# Generate a secure key with: python -c "import secrets; print(secrets.token_urlsafe(32))"
# Leave empty for development without authentication
API_KEY=your-secure-api-key-here

# Require API key authentication for protected endpoints
# Options: true (default for production), false (for development)
# When true, API_KEY must be set
REQUIRE_API_KEY=true

# Environment
# Options: development, production
# Affects logging format and API key requirements
ENVIRONMENT=development
